// Generated by CoffeeScript 1.6.2
(function() {
  var FeedStore, LocalStorage, get_key, store,
    __hasProp = {}.hasOwnProperty;

  LocalStorage = require("node-localstorage").LocalStorage;

  global.localStorage = new LocalStorage('storage');

  store = require("store");

  get_key = function(collection, key) {
    return collection + "-" + key;
  };

  FeedStore = (function() {
    function FeedStore() {}

    FeedStore.prototype.initialize = function() {
      return console.log("FeedStore ctor");
    };

    FeedStore.prototype.clear = function() {
      return store.clear();
    };

    FeedStore.prototype.add = function(params) {
      var c, k, v;

      c = params.collection;
      k = params.key;
      v = params.value;
      return store.set(get_key(c, k), {
        collection: c,
        key: k,
        value: v
      });
    };

    FeedStore.prototype.find = function(params) {
      var c, k, wrapped_value;

      c = params.collection;
      k = params.key;
      wrapped_value = store.get(get_key(c, k));
      return wrapped_value != null ? wrapped_value.value : void 0;
    };

    FeedStore.prototype.all = function() {
      return store.getAll();
    };

    FeedStore.prototype.find_all = function(params) {
      var c, key, query_result, results, wrapped_value;

      c = params.collection;
      results = {};
      query_result = store.getAll();
      for (key in query_result) {
        if (!__hasProp.call(query_result, key)) continue;
        wrapped_value = query_result[key];
        if (wrapped_value.collection === c) {
          results[wrapped_value.key] = wrapped_value.value;
        }
      }
      return results;
    };

    return FeedStore;

  })();

  module.exports = new FeedStore();

}).call(this);
